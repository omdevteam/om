# This file is part of OM.
#
# OM is free software: you can redistribute it and/or modify it under the terms of
# the GNU General Public License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# OM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with OM.
# If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2020 -2023 SLAC National Accelerator Laboratory
#
# Based on OnDA - Copyright 2014-2019 Deutsches Elektronen-Synchrotron DESY,
# a research centre of the Helmholtz Association.
"""
Handling of data events from a ZMQ stream.

This module contains Data Event Handler classes that deal with events retrieved from a
a ZMQ stream.
"""
import sys
from typing import Any, Dict, Generator, List, Tuple

import zmq

from om.lib.exceptions import OmDataExtractionError, OmInvalidZmqUrl
from om.lib.layer_management import filter_data_sources
from om.lib.parameters import MonitorParameters
from om.lib.rich_console import console, get_current_timestamp
from om.protocols.data_retrieval_layer import (
    OmDataEventHandlerProtocol,
    OmDataSourceProtocol,
)


class Jungfrau1MZmqDataEventHandler(OmDataEventHandlerProtocol):
    """
    See documentation of the `__init__` function.
    """

    def __init__(
        self,
        *,
        source: str,
        data_sources: Dict[str, OmDataSourceProtocol],
        monitor_parameters: MonitorParameters,
    ) -> None:
        """
        Data Event Handler for Jungfrau 1M's ZMQ stream.

        This class handles data events recovered from a ZMQ stream generated by a
        Jungfrau 1M detector.

        This class implements the interface described by its base Protocol class.
        Please see the documentation of that class for additional information about
        the interface.

        * For this Event Handler, an event corresponds to all the information
          associated with the content of a single ZMQ message (a single detector data
          frame).

        * The source string required by this Data Event Handler is the URL (in
          ZeroMQ format) where the Jungfrau 1M detector broadcasts data.

        Arguments:

            source: A string describing the data event source.

            data_sources: A dictionary containing a set of Data Source class instances.

                * Each dictionary key must define the name of a data source.

                * The corresponding dictionary value must store the instance of the
                  [Data Source class][om.protocols.data_retrieval_layer.OmDataSourceProtocol]  # noqa: E501
                  that describes the source.

            monitor_parameters: An object storing OM's configuration parameters.
        """
        self._source: str = source
        self._monitor_params: MonitorParameters = monitor_parameters
        self._data_sources: Dict[str, OmDataSourceProtocol] = data_sources

    def initialize_event_handling_on_collecting_node(
        self, *, node_rank: int, node_pool_size: int
    ) -> None:
        """
        Initializes Jungfrau 1M ZMQ event handling on the collecting node.

        Please see the documentation of the base Protocol class for additional
        information about this method.

        Jungfrau 1M's ZMQ event handling does not need to be initialized on the
        collecting node, so this function actually does nothing.

        Arguments:

            node_rank: The OM rank of the current node int the OM node pool. The rank
                is an integer that unambiguously identifies the node in the pool.

            node_pool_size: The total number of nodes in the OM pool, including all the
                processing nodes and the collecting node.
        """
        pass

    def initialize_event_handling_on_processing_node(
        self, *, node_rank: int, node_pool_size: int
    ) -> None:
        """
        Initializes Jungfrau 1M ZMQ event handling on the processing nodes.

        Please see the documentation of the base Protocol class for additional
        information about this method.

        Arguments:

            node_rank: The OM rank of the current node int the OM node pool. The rank
                is an integer that unambiguously identifies the node in the pool.

            node_pool_size: The total number of nodes in the OM pool, including all the
                processing nodes and the collecting node.
        """
        required_data: List[str] = self._monitor_params.get_parameter(
            group="data_retrieval_layer",
            parameter="required_data",
            parameter_type=list,
            required=True,
        )

        self._required_data_sources = filter_data_sources(
            data_sources=self._data_sources,
            required_data=required_data,
        )

    def event_generator(
        self,
        *,
        node_rank: int,
        node_pool_size: int,
    ) -> Generator[Dict[str, Any], None, None]:
        """
        Retrieves Jungfrau 1M events from a ZMQ stream.

        Please see the documentation of the base Protocol class for additional
        information about this method.

        This function retrieves data events on the processing nodes. Each retrieved
        event corresponds to the content of an individual ZMQ message, which stores a
        single detector frame with all its associated data. The events are retrieved
        from a ZMQ data stream, and the server broadcasting the stream takes care of
        distributing the events across all processing nodes.

        Arguments:

            node_rank: The OM rank of the current node int the OM node pool. The rank
                is an integer that unambiguously identifies the node in the pool.

            node_pool_size: The total number of nodes in the OM pool, including all the
                processing nodes and the collecting node.
        """
        url: str = self._source
        zmq_context: Any = zmq.Context()
        console.print(f"{get_current_timestamp()} Node {node_rank} connecting to {url}")
        zmq_socket: Any = zmq_context.socket(zmq.PULL)
        zmq_socket.setsockopt(zmq.CONFLATE, 1)
        try:
            zmq_socket.connect(url)
        except zmq.error.ZMQError as exc:
            raise OmInvalidZmqUrl(
                "The format of the provided URL is not valid. The URL must be in "
                "the format tcp://hostname:port or in the format "
                "ipc:///path/to/socket, and in the latter case the user must have the "
                "correct permissions to access the socket."
            ) from exc

        self._data_sources["timestamp"].initialize_data_source()
        source_name: str
        for source_name in self._required_data_sources:
            self._data_sources[source_name].initialize_data_source()

        data_event: Dict[str, Any] = {}
        data_event["additional_info"] = {}

        while True:
            msg: Tuple[Dict[str, Any], Dict[str, Any]] = zmq_socket.recv_pyobj()
            data_event["data"] = msg
            data_event["additional_info"]["timestamp"] = self._data_sources[
                "timestamp"
            ].get_data(event=data_event)

            yield data_event

    def open_event(self, *, event: Dict[str, Any]) -> None:
        """
        Opens a Jungfrau 1M ZMQ event.

        Please see the documentation of the base Protocol class for additional
        information about this method.

        Jungfrau 1M data events retrieved from a ZMQ stream do not need to be opened,
        so this function actually does nothing.

        Arguments:

            event: A dictionary storing the event data.
        """
        pass

    def close_event(self, *, event: Dict[str, Any]) -> None:
        """
        Closes a Jungfrau 1M ZMQ event.

        Please see the documentation of the base Protocol class for additional
        information about this method.

        Jungfrau 1M data events retrieved from a ZMQ stream do not need to be closed,
        so this function actually does nothing.

        Arguments:

            event: A dictionary storing the event data.
        """
        pass

    def extract_data(
        self,
        *,
        event: Dict[str, Any],
    ) -> Dict[str, Any]:
        """
        Extracts data from a Jungfrau 1M ZMQ event.

        Please see the documentation of the base Protocol class for additional
        information about this method.

        Arguments:

            event: A dictionary storing the event data.

        Returns:

            A dictionary storing the extracted data.

                * Each dictionary key identifies a Data Source in the event for which
                data has been retrieved.

                * The corresponding dictionary value stores the data extracted from the
                Data Source for the event being processed.

        Raises:

            OmDataExtractionError: Raised when data cannot be extracted from the event.
        """
        data: Dict[str, Any] = {}
        source_name: str
        data["timestamp"] = event["additional_info"]["timestamp"]
        for source_name in self._required_data_sources:
            try:
                data[source_name] = self._data_sources[source_name].get_data(
                    event=event
                )
            # One should never do the following, but it is not possible to anticipate
            # every possible error raised by the facility frameworks.
            except Exception:
                exc_type, exc_value = sys.exc_info()[:2]
                if exc_type is not None:
                    raise OmDataExtractionError(
                        f"OM Warning: Cannot interpret {source_name} event data due "
                        f"to the following error: {exc_type.__name__}: {exc_value}"
                    )

        return data

    def initialize_event_data_retrieval(self) -> None:
        """
        Initializes event data retrievals from psana.

        Please see the documentation of the base Protocol class for additional
        information about this method.

        Jungfrau 1M's ZMQ data stream does not allow the retrieval of single standalone
        data events, so this function has no implementation.

        Raises:

          NotImplementedError: This functionality has not been implemented for this
                Data Event Handler.
        """
        raise NotImplementedError

    def retrieve_event_data(self, event_id: str) -> Dict[str, Any]:
        """
        Retrieves all data related to the requested event.

        Please see the documentation of the base Protocol class for additional
        information about this method.

        Jungfrau 1M's ZMQ data stream does not allow the retrieval of single standalone
        data events, so this function has no implementation.

        Arguments:

            event_id: A string that uniquely identifies a data event.

        Returns:

            All data related to the requested detector data frame.

        Raises:

          NotImplementedError: This functionality has not been implemented for this
                Data Event Handler.
        """
        raise NotImplementedError
